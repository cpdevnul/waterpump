// =========================================================================
// Includes
// =========================================================================
#include <Wire.h>              // For I2C communication (LCD)
#include <LiquidCrystal_I2C.h> // For I2C LCD display
#include <WiFi.h>              // For ESP32 Wi-Fi
#include <ArduinoOTA.h>        // For Over-the-Air updates
#include <time.h>              // For time functions (NTP, strftime)
#include <WiFiClientSecure.h>  // For HTTPS communication (IFTTT uses HTTPS)
#include <HTTPClient.h>        // For making HTTP(S) requests
// #include <UrlEncode.h>      // No longer needed for IFTTT
#include <Adafruit_GPS.h>      // Using Adafruit GPS Library
#include <HardwareSerial.h>    // For secondary hardware serial (GPS)
#include <math.h>              // For math functions
#include <stdio.h>             // For snprintf

// =========================================================================
// == CONFIGURATION SECTION ==
// =========================================================================

// --- Hardware Pins ---
#define RELAY_PIN 17    // ESP32 pin GPIO17 that connects to relay
#define MOISTURE_PIN 36 // ESP32 pin GPIO36 (ADC0 / SVP) that connects to AOUT pin of moisture sensor
#define GPS_RX_PIN 16   // ESP32 RX2 pin (Connect to GPS TX)
#define GPS_TX_PIN 4    // ESP32 TX2 pin (Connect to GPS RX) - Often unused by GPS module itself

// --- Moisture Sensor Calibration & Control ---
const int AirValue = 3000;           // Calibrate this value in air (sensor out of soil)
const int WaterValue = 1110;         // Calibrate this value in water (sensor fully submerged)
const float moistureThresholdDry = 40.0; // Turn pump ON below this threshold
const float moistureHysteresis = 5.0;    // Turn pump OFF only when moisture is >= (ThresholdDry + Hysteresis)
const int NUM_MOISTURE_SAMPLES = 10; // Number of analog readings to average
const int MOISTURE_SAMPLE_DELAY_MS = 10; // Delay between samples for averaging

// --- Pump Control ---
const unsigned long maxPumpRunTime = 25 * 60 * 1000; // Max pump run time: 25 minutes (milliseconds)

// --- LCD Display ---
const int LCD_I2C_ADDR = 0x27; // <<< SET YOUR LCD I2C ADDRESS HERE (e.g., 0x27 or 0x3F)
const int LCD_COLS = 16;       // LCD columns (e.g., 16 or 20)
const int LCD_ROWS = 2;        // LCD rows (e.g., 2 or 4)

// --- Wi-Fi Credentials ---
const char *ssid = "SET";       // <<< SET YOUR WIFI SSID HERE
const char *password = "SET"; // <<< SET YOUR WIFI PASSWORD HERE

// --- IFTTT Webhooks Configuration ---
const char* IFTTT_KEY = "SET"; // <<< PASTE YOUR IFTTT WEBHOOKS KEY HERE
const char* IFTTT_EVENT = "SET";         // <<< MUST MATCH Event Name in your IFTTT Applet
String IFTTT_URL_BASE = "https://maker.ifttt.com/trigger/" + String(IFTTT_EVENT) + "/with/key/" + String(IFTTT_KEY);
const unsigned long HTTP_TIMEOUT_MS = 10000; // HTTP client timeout (10 seconds)

// --- NTP Time ---
const char* ntpServer = "pool.ntp.org";
// Current location: Buckeye, AZ (MST = UTC-7, no DST)
const long gmtOffset_sec = -7 * 3600; // UTC-7 (MST - Arizona, no DST)
const int daylightOffset_sec = 0;     // No daylight saving offset

// --- GPS ---
const unsigned long gpsBaud = 9600; // Default baud rate for many GPS modules (e.g., ATGM336H)

// --- Timing Intervals (milliseconds) ---
const long sampleInterval = 10000;      // Sample moisture every 10 seconds
const long timeUpdateInterval = 1000;   // Update displayed time every 1 second
const long sheetUpdateInterval = 15 * 60 * 1000; // Log data via IFTTT every 15 minutes
const unsigned long wifiReconnectInterval = 60 * 1000; // Try reconnecting Wi-Fi every 60 seconds if down

// --- Serial Debug Baud Rate ---
const long SERIAL_BAUD_RATE = 9600; // <<< Ensure Serial Monitor matches this (9600)

// =========================================================================
// Global Variables & Objects
// =========================================================================
LiquidCrystal_I2C lcd(LCD_I2C_ADDR, LCD_COLS, LCD_ROWS);
HardwareSerial gpsSerial(2); // Use Hardware Serial port 2 (UART2)
Adafruit_GPS GPS(&gpsSerial);

// --- State Variables ---
unsigned long lastSampleTime = 0;
unsigned long lastTimeUpdate = 0;
unsigned long lastSheetUpdate = 0; // Timer for IFTTT logging interval
unsigned long lastWiFiReconnectTime = 0;
unsigned long pumpStartTime = 0;
bool pumpIsRunning = false;
bool wifiConnected = false;
int currentMoisturePercent = -1; // Global variable for the latest moisture reading (%) (-1 indicates not yet read)
struct tm timeinfo; // For holding time from NTP
char dateTimeStringBuff[20]; // Buffer for formatted date/time strings (used for Serial logging)
// Buffers for formatting GPS coordinates
char latStr[12];
char lonStr[12];

// =========================================================================
// Function Prototypes
// =========================================================================
int readAverageMoisture();
void updateMoistureAndPump(int moisturePercentage, unsigned long currentMillis);
void checkPumpRuntime(unsigned long currentMillis);
bool connectWiFi();
void checkWiFiConnection();
bool sendToIFTTT(String value1, String value2, String value3); // New function for IFTTT
void startOTA();
void updateLCD();
void printLcdPadded(int value, int width); // Helper for LCD formatting

// =========================================================================
// SETUP - Runs once on boot/reset
// =========================================================================
void setup()
{
    Serial.begin(SERIAL_BAUD_RATE);
    while (!Serial && millis() < 2000); // Optional: Wait max 2 seconds for serial connection
    Serial.println("\n\n============================");
    Serial.println(" ESP32 Watering System (IFTTT)");
    Serial.println("       (+ GPS Logging)        ");
    Serial.println("============================");

    pinMode(RELAY_PIN, OUTPUT);
    digitalWrite(RELAY_PIN, LOW); // Ensure pump is off initially
    pinMode(MOISTURE_PIN, INPUT);
    analogSetAttenuation(ADC_11db); // Set ADC attenuation for full 0-3.3V range on MOISTURE_PIN

    // --- LCD Initialization ---
    Wire.begin(); // Initialize I2C
    lcd.init();   // Initialize the LCD
    Serial.println("Attempting LCD Initialization...");
    lcd.backlight();
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("System Starting"); // If this appears, LCD is likely working
    delay(1000);

    // --- Initialize GPS Serial connection ---
    Serial.print("Initializing GPS Serial (UART2) on RX:"); Serial.print(GPS_RX_PIN);
    Serial.print(" TX:"); Serial.println(GPS_TX_PIN);
    gpsSerial.begin(gpsBaud, SERIAL_8N1, GPS_RX_PIN, GPS_TX_PIN);
    if (!gpsSerial) { // Check if UART pins are valid/available
       Serial.println("!!! Invalid GPS UART pins specified or UART2 unavailable!");
       lcd.setCursor(0,0); lcd.print("GPS Pin Error!"); delay(3000);
    } else {
       lcd.setCursor(0,1); lcd.print("GPS Serial OK..."); delay(1000);
    }

    // --- Initialize Adafruit GPS ---
    GPS.begin(gpsBaud); // Begin communication with GPS

    // --- Configure GPS Module ---
    Serial.println("Configuring GPS module NMEA output...");
    lcd.setCursor(0,1); lcd.print("GPS Config......");
    GPS.sendCommand(PMTK_SET_NMEA_OUTPUT_RMCGGA); // Request RMC (includes fix status, lat/lon, speed, date) and GGA (includes fix status, lat/lon, altitude, satellites)
    delay(100); // Short delay between commands
    GPS.sendCommand(PMTK_SET_NMEA_UPDATE_1HZ);    // Request 1 Hz update rate
    delay(100);
    Serial.println("GPS Configuration commands sent.");
    delay(1000);

    // --- Connect to Wi-Fi ---
    wifiConnected = connectWiFi();

    // --- Configure NTP Time and OTA (only if Wi-Fi connected) ---
    // NTP Time is still useful for Serial logs even if IFTTT uses its own timestamp
    if (wifiConnected)
    {
        lcd.clear(); lcd.setCursor(0, 0); lcd.print("WiFi OK");
        lcd.setCursor(0, 1); lcd.print("Syncing time...");
        Serial.println("WiFi Connected. Configuring time from NTP...");
        configTime(gmtOffset_sec, daylightOffset_sec, ntpServer);
        int sync_attempts = 0; const int max_sync_attempts = 6;
        while (!getLocalTime(&timeinfo, 5000) && sync_attempts < max_sync_attempts) { // Try for ~30 seconds
            Serial.printf("Failed to obtain time. Retrying... (Attempt %d/%d)\n", sync_attempts + 1, max_sync_attempts);
            lcd.setCursor(0, 1); lcd.print("Time Sync Fail "); lcd.print(sync_attempts+1);
            sync_attempts++;
        }
        if (getLocalTime(&timeinfo)) { // Check one last time
             Serial.println("Time synchronized successfully.");
             strftime(dateTimeStringBuff, sizeof(dateTimeStringBuff), "%H:%M:%S", &timeinfo);
             lcd.setCursor(0, 1); lcd.print("Time Synced! "); lcd.print(dateTimeStringBuff); delay(2000);
        } else {
             Serial.println("Giving up on initial time sync.");
             lcd.setCursor(0, 1); lcd.print("Time Sync Failed"); delay(2000);
        }
        startOTA(); // Start OTA
    } else {
         lcd.clear(); lcd.setCursor(0, 0); lcd.print("System Start");
         lcd.setCursor(0, 1); lcd.print("No WiFi/OTA/NTP"); delay(2000);
    }

    lcd.clear();

    // Initialize timers
    unsigned long initMillis = millis();
    lastSampleTime = initMillis;
    lastTimeUpdate = initMillis;
    lastSheetUpdate = initMillis; // Initialize sheet update timer
    lastWiFiReconnectTime = initMillis;
    pumpStartTime = 0; // Ensure pump start time is zeroed
    Serial.println("Setup Complete. Entering Main Loop.");
    Serial.println("----------------------------");
}

// =========================================================================
// LOOP - Runs repeatedly after setup
// =========================================================================
void loop()
{
    if (wifiConnected) { // Only handle OTA if WiFi is connected
         ArduinoOTA.handle();
    }

    // --- Process GPS Data ---
    while (gpsSerial.available() > 0) {
         char c = GPS.read();
         // Serial.print(c); // Uncomment for raw GPS debug
         if (GPS.newNMEAreceived()) {
             if (!GPS.parse(GPS.lastNMEA())) { } // Ignore parse errors for now
         }
    }

    unsigned long currentMillis = millis(); // Get current time for this loop iteration

    checkWiFiConnection(); // Maintain WiFi connection (handles reconnection)
    checkPumpRuntime(currentMillis); // Check max pump runtime safety cutoff

    // --- Check Moisture Sensor periodically ---
    if (currentMillis - lastSampleTime >= sampleInterval)
    {
        lastSampleTime = currentMillis; // Update sample time immediately

        // Get averaged reading - Function now prints raw average internally
        currentMoisturePercent = readAverageMoisture();

        // Print percentage (raw average is printed inside the function)
        Serial.printf("Moisture: %d%%\n", currentMoisturePercent);

        updateMoistureAndPump(currentMoisturePercent, currentMillis); // Decide pump state

        // --- Log MOISTURE data periodically via IFTTT (with GPS) ---
        if (wifiConnected && (currentMillis - lastSheetUpdate >= sheetUpdateInterval))
        {
            // Update the timer *before* attempting the log.
            lastSheetUpdate = currentMillis;

            String gpsDataString = ""; // Default to empty string

            // Check for GPS fix before logging
            if (GPS.fix) {
                // Format latitude and longitude into strings (using snprintf for float)
                // %.6f gives 6 decimal places, adjust precision if needed
                snprintf(latStr, sizeof(latStr), "%.6f", GPS.latitudeDegrees);
                snprintf(lonStr, sizeof(lonStr), "%.6f", GPS.longitudeDegrees);
                // Combine into Value3 string
                gpsDataString = String(latStr) + ";" + String(lonStr);
                Serial.printf("  (GPS Fix Found: %s)\n", gpsDataString.c_str());
            } else {
                Serial.println("  (No GPS Fix for logging)");
                gpsDataString = "No Fix"; // Or leave empty: ""
            }


            Serial.println("\n----------------------------------------");
            // Log current time to Serial for reference (IFTTT adds its own timestamp)
            if(getLocalTime(&timeinfo, 0)) { // Quick check if time is available
                 strftime(dateTimeStringBuff, sizeof(dateTimeStringBuff), "%Y-%m-%d %H:%M:%S", &timeinfo);
                 Serial.print(dateTimeStringBuff); Serial.print(" - ");
            }
            Serial.printf("Attempting to log MOISTURE (%d%%) via IFTTT...\n", currentMoisturePercent);

            // Attempt to log via IFTTT
            // Value1 = eventType, Value2 = moisture, Value3 = gpsDataString
            if (sendToIFTTT("moisture", String(currentMoisturePercent), gpsDataString)) {
               Serial.println("IFTTT log successful.");
            } else {
               Serial.println("IFTTT log FAILED. Next attempt in ~15 minutes.");
            }
            Serial.println("----------------------------------------");
        }
    } // End of moisture check block


    // --- Update LCD Display periodically ---
    if (currentMillis - lastTimeUpdate >= timeUpdateInterval) // Every 1s
    {
        lastTimeUpdate = currentMillis;
        updateLCD(); // Refresh LCD screen
    }

} // End of loop()

// =========================================================================
// HELPER FUNCTIONS
// =========================================================================

/**
 * @brief Reads the moisture sensor multiple times and returns the average mapped percentage.
 * Also prints the raw average value to the Serial monitor.
 * @return Average moisture percentage (0-100).
 */
int readAverageMoisture() {
    long totalValue = 0;
    for (int i = 0; i < NUM_MOISTURE_SAMPLES; i++) {
        totalValue += analogRead(MOISTURE_PIN);
        delay(MOISTURE_SAMPLE_DELAY_MS);
    }
    int avgValue = totalValue / NUM_MOISTURE_SAMPLES;

    // Print the raw average value to Serial Monitor
    if(avgValue >= 4095) { // Check for max value specifically
       Serial.print("  (Raw Avg: MAX) ");
    } else {
       Serial.printf("  (Raw Avg: %d) ", avgValue); // Print raw average before mapping
    }


    // Map the averaged value
    int percentage = map(avgValue, AirValue, WaterValue, 0, 100);
    // Constrain to 0-100 range
    percentage = constrain(percentage, 0, 100);

    return percentage;
}


/**
 * @brief Updates the LCD screen with current info (Moisture, Satellites, Time, Pump Status).
 */
void updateLCD() {
    // Line 0: Moisture and GPS Satellite Count
    lcd.setCursor(0, 0);
    lcd.print("Moist:");
    if (currentMoisturePercent >= 0) {
        printLcdPadded(currentMoisturePercent, 3); // Print moisture with padding (e.g., " 45%", "100%")
        lcd.print("%");
    } else {
        lcd.print("---%"); // Not read yet
    }

    lcd.print(" S:"); // GPS Satellites
    if (GPS.fix) {
        printLcdPadded(GPS.satellites, 2); // Print satellites with padding (e.g., "08", "12")
    } else {
        lcd.print("--"); // No fix
    }
    lcd.print(" "); // Trailing space to clear rest of line if needed

    // Line 1: Time and Pump Status
    lcd.setCursor(0, 1);
    if (wifiConnected && getLocalTime(&timeinfo, 0)) { // Use 0 timeout for check if already synced
        strftime(dateTimeStringBuff, sizeof(dateTimeStringBuff), "%H:%M:%S", &timeinfo);
        lcd.print(dateTimeStringBuff);
    } else {
        lcd.print("--:--:--"); // Time not available/synced
    }
    lcd.print(" Pmp:");
    lcd.print(pumpIsRunning ? "ON " : "OFF"); // Added space after ON for alignment
}

/**
 * @brief Prints an integer value to the LCD, padded with leading spaces.
 * @param value The integer value to print.
 * @param width The total width the number should occupy (including spaces).
 */
void printLcdPadded(int value, int width) {
    char format[10];
    char buffer[10];
    snprintf(format, sizeof(format), "%%%dd", width); // Creates format string like "%3d"
    snprintf(buffer, sizeof(buffer), format, value);
    lcd.print(buffer);
}


/**
 * @brief Decides pump state based on moisture percentage and hysteresis thresholds.
 * Sends pump OFF event (with GPS) to IFTTT when pump stops.
 */
void updateMoistureAndPump(int moisturePercentage, unsigned long currentMillis) {
    // Check if sensor reading is valid
    if (moisturePercentage < 0) {
        return; // Don't control pump with invalid reading
    }

    // --- Turn Pump ON ---
    if (moisturePercentage < moistureThresholdDry && !pumpIsRunning) {
        Serial.println("-> Moisture below threshold. Turning Pump ON.");
        digitalWrite(RELAY_PIN, HIGH);
        pumpIsRunning = true;
        pumpStartTime = currentMillis; // Record start time
        updateLCD(); // Update display immediately
    }
    // --- Turn Pump OFF ---
    else if (moisturePercentage >= (moistureThresholdDry + moistureHysteresis) && pumpIsRunning) {
        Serial.println("-> Moisture above threshold + hysteresis. Turning Pump OFF.");
        digitalWrite(RELAY_PIN, LOW);
        pumpIsRunning = false;
        unsigned long durationMillis = 0;
        if (pumpStartTime > 0) { // Calculate duration only if start time was recorded
             durationMillis = currentMillis - pumpStartTime;
        } else {
             Serial.println("Warning: Pump turned off, but start time was zero. Duration not calculated.");
        }
        updateLCD(); // Update display immediately

        // Log the pump OFF event via IFTTT (with GPS)
        if (wifiConnected && durationMillis > 0) { // Log only if connected and duration is valid
            Serial.println("----------------------------------------");
             if(getLocalTime(&timeinfo, 0)) {
                 strftime(dateTimeStringBuff, sizeof(dateTimeStringBuff), "%Y-%m-%d %H:%M:%S", &timeinfo);
                 Serial.print(dateTimeStringBuff); Serial.print(" - ");
            }
            float durationSec = durationMillis / 1000.0;
            Serial.printf("Attempting to log PUMP OFF (Duration: %.1f sec) via IFTTT...\n", durationSec);

            String gpsDataStringPump = ""; // Default to empty string
            // Check for GPS fix at the time pump turns off
            if (GPS.fix) {
                snprintf(latStr, sizeof(latStr), "%.6f", GPS.latitudeDegrees);
                snprintf(lonStr, sizeof(lonStr), "%.6f", GPS.longitudeDegrees);
                gpsDataStringPump = String(latStr) + ";" + String(lonStr);
                Serial.printf("  (GPS Fix Found: %s)\n", gpsDataStringPump.c_str());
            } else {
                Serial.println("  (No GPS Fix for logging pump event)");
                gpsDataStringPump = "No Fix"; // Or leave empty: ""
            }

            // Value1 = eventType, Value2 = duration, Value3 = gpsDataStringPump
            sendToIFTTT("pumpOff", String(durationSec, 1), gpsDataStringPump);
            Serial.println("----------------------------------------");
            // Note: We don't check return/retry for pump events here for simplicity
        }
        pumpStartTime = 0; // Reset start time after pump stops
    }
}

/**
 * @brief Checks if the pump has exceeded its maximum allowed runtime and forces it off.
 */
void checkPumpRuntime(unsigned long currentMillis) {
    if (pumpIsRunning && pumpStartTime > 0) { // Ensure pump is running and start time is valid
        if (currentMillis - pumpStartTime >= maxPumpRunTime) {
            Serial.println("\n!!! Max pump runtime reached. Forcing Pump OFF. !!!");
            digitalWrite(RELAY_PIN, LOW);
            pumpIsRunning = false;
            pumpStartTime = 0; // Reset start time
            // Display message on LCD
            lcd.clear();
            lcd.setCursor(0, 0); lcd.print("Pump Runtime");
            lcd.setCursor(0, 1); lcd.print("Limit Reached!");
            delay(3000); // Show message for 3 seconds
            lcd.clear();
            lastTimeUpdate = 0; // Force immediate LCD refresh after message
        }
    }
}

/**
 * @brief Connects to the Wi-Fi network specified by ssid and password with retries.
 */
bool connectWiFi() {
    lcd.clear(); lcd.setCursor(0, 0); lcd.print("Connecting WiFi");
    WiFi.mode(WIFI_STA);
    WiFi.begin(ssid, password);
    Serial.print("\nConnecting to WiFi SSID: "); Serial.println(ssid);

    int wifi_connect_counter = 0;
    const int max_wifi_attempts = 5;
    const unsigned long initial_wifi_delay = 500;
    const unsigned long wifi_delay_increment = 1000;

    while (WiFi.status() != WL_CONNECTED && wifi_connect_counter < max_wifi_attempts) {
        lcd.setCursor(wifi_connect_counter % LCD_COLS, 1); lcd.print(".");
        unsigned long current_wifi_delay = initial_wifi_delay + (wifi_connect_counter * wifi_delay_increment);
        Serial.printf("Attempt %d/%d - Waiting %.1f seconds...\n", wifi_connect_counter + 1, max_wifi_attempts, current_wifi_delay / 1000.0);
        delay(current_wifi_delay);
        wifi_connect_counter++;
    }

    if (WiFi.status() == WL_CONNECTED) {
        Serial.println("\nWiFi connected successfully!");
        Serial.print("IP address: "); Serial.println(WiFi.localIP());
        lcd.clear(); lcd.setCursor(0, 0); lcd.print("WiFi Connected!");
        lcd.setCursor(0, 1); lcd.print(WiFi.localIP());
        delay(2000);
        return true;
    } else {
        Serial.println("\nFailed to connect to WiFi after multiple attempts.");
        lcd.clear(); lcd.setCursor(0, 0); lcd.print("WiFi Connect");
        lcd.setCursor(0, 1); lcd.print("Failed!");
        delay(2000);
        WiFi.disconnect(true);
        return false;
    }
}

/**
 * @brief Checks the Wi-Fi connection status and attempts to reconnect if disconnected.
 */
void checkWiFiConnection() {
    unsigned long currentMillis = millis();
    if (WiFi.status() != WL_CONNECTED) {
        if (wifiConnected) { // Was previously connected
            Serial.println("\n!!! WiFi connection lost! !!!");
            wifiConnected = false;
            lastTimeUpdate = 0; // Force LCD update to show disconnected state
            updateLCD(); // Update LCD immediately
        }
        // Try to reconnect periodically
        if (currentMillis - lastWiFiReconnectTime >= wifiReconnectInterval) {
            Serial.println("\nAttempting to reconnect to WiFi...");
            lastWiFiReconnectTime = currentMillis;
            lcd.clear(); lcd.setCursor(0, 0); lcd.print("WiFi Lost");
            lcd.setCursor(0, 1); lcd.print("Reconnecting...");

            wifiConnected = connectWiFi(); // Attempt reconnection

            if (wifiConnected) {
                 Serial.println("Reconnected. Verifying time sync & Re-init OTA...");
                 lcd.clear(); lcd.setCursor(0,0); lcd.print("Reconnected!");
                 lcd.setCursor(0,1); lcd.print("Checking Time..."); delay(1000);
                 // Attempt to sync time immediately after reconnect
                 if (!getLocalTime(&timeinfo, 5000)) {
                     Serial.println("Time sync pending after reconnect.");
                     lcd.setCursor(0,1); lcd.print("Time Sync Pend");
                 } else {
                     Serial.println("Time OK after reconnect.");
                     strftime(dateTimeStringBuff, sizeof(dateTimeStringBuff), "%H:%M:%S", &timeinfo);
                     lcd.setCursor(0,1); lcd.print("Time OK! "); lcd.print(dateTimeStringBuff);
                 }
                 delay(1000);
                 startOTA(); // Re-initialize OTA
                 lcd.clear();
                 lastTimeUpdate = 0; // Force immediate LCD refresh
            } else {
                 // Failed to reconnect this attempt
                 lcd.clear(); lcd.setCursor(0,0); lcd.print("Reconnect Fail");
                 delay(2000);
                 lcd.clear();
                 lastTimeUpdate = 0; // Force immediate LCD refresh
            }
        }
    } else { // WiFi.status() == WL_CONNECTED
        if (!wifiConnected) { // Just reconnected (or connected for first time after initial failure)
            Serial.println("\nWiFi connection established.");
            wifiConnected = true;
            // Re-check time and start OTA if needed
            if (!getLocalTime(&timeinfo, 1000)) { // Quick check
                 configTime(gmtOffset_sec, daylightOffset_sec, ntpServer); // Reconfigure time
            }
            startOTA(); // Ensure OTA is started
            lastTimeUpdate = 0; // Force immediate LCD refresh
        }
    }
}

/**
 * @brief Configures and starts the Arduino OTA service. Safe to call multiple times.
 */
void startOTA() {
    ArduinoOTA.setHostname("ESP32-Soil-Sensor");
    // ArduinoOTA.setPassword("YourSecurePassword"); // Optional

    // --- Existing OTA Handlers ---
    ArduinoOTA.onStart([]() {
        String type;
        if (ArduinoOTA.getCommand() == U_FLASH) { type = "sketch"; }
        else { type = "filesystem"; } // U_SPIFFS
        Serial.println("Start updating " + type);
        lcd.clear(); lcd.setCursor(0, 0); lcd.print("OTA Update Start");
        digitalWrite(RELAY_PIN, LOW); pumpIsRunning = false; pumpStartTime = 0;
    });
    ArduinoOTA.onEnd([]() {
        Serial.println("\nEnd");
        lcd.setCursor(0, 1); lcd.print("Update Finished!"); delay(1000);
    });
    ArduinoOTA.onProgress([](unsigned int progress, unsigned int total) {
        int percentage = (progress / (total / 100));
        Serial.printf("Progress: %u%%\r", percentage);
        lcd.setCursor(0, 1); lcd.print("Progress: "); printLcdPadded(percentage, 3); lcd.print("%");
    });
    ArduinoOTA.onError([](ota_error_t error) {
        Serial.printf("Error[%u]: ", error);
        lcd.clear(); lcd.setCursor(0, 0); lcd.print("OTA Update Error"); lcd.setCursor(0, 1);
        if (error == OTA_AUTH_ERROR) { Serial.println("Auth Failed"); lcd.print("Auth Failed"); }
        else if (error == OTA_BEGIN_ERROR) { Serial.println("Begin Failed"); lcd.print("Begin Failed"); }
        else if (error == OTA_CONNECT_ERROR) { Serial.println("Connect Failed"); lcd.print("Connect Failed"); }
        else if (error == OTA_RECEIVE_ERROR) { Serial.println("Receive Failed"); lcd.print("Receive Failed"); }
        else if (error == OTA_END_ERROR) { Serial.println("End Failed"); lcd.print("End Failed"); }
        else { Serial.println("Unknown Error"); lcd.print("Unknown Error"); }
        delay(3000);
    });
    // --- End Existing Handlers ---

    ArduinoOTA.begin();
    Serial.println("\nOTA Ready");
    Serial.print("IP address: "); Serial.println(WiFi.localIP());
}


/**
 * @brief Sends data to the IFTTT Webhook service via HTTPS POST.
 * @param value1 String for Value1 ingredient (used for eventType).
 * @param value2 String for Value2 ingredient (used for moisture or duration).
 * @param value3 String for Value3 ingredient (used for GPS Lat;Lon string).
 * @return true if the request was sent successfully (HTTP 200 OK), false otherwise.
 */
bool sendToIFTTT(String value1, String value2, String value3) {
    if (!wifiConnected || WiFi.status() != WL_CONNECTED) {
        Serial.println("IFTTT Sender: Cannot send data, WiFi not connected.");
        return false;
    }

    bool success = false;
    int attempt = 1; // Simple version without retries

    WiFiClientSecure client;
    HTTPClient http;

    // !!! SECURITY WARNING !!!
    // setInsecure() bypasses certificate validation. This is convenient but less secure.
    // For better security, implement proper certificate validation.
    client.setInsecure();

    Serial.print("\nIFTTT Sender URL (Attempt "); Serial.print(attempt); Serial.print("): "); Serial.println(IFTTT_URL_BASE);

    if (http.begin(client, IFTTT_URL_BASE)) {
        http.addHeader("Content-Type", "application/json");
        http.setTimeout(HTTP_TIMEOUT_MS);

        // Create JSON payload using simple String manipulation
        String jsonPayload = "{\"value1\":\"" + value1 +
                           "\",\"value2\":\"" + value2 +
                           "\",\"value3\":\"" + value3 + "\"}";

        Serial.print("IFTTT Sender Payload: "); Serial.println(jsonPayload);

        Serial.println("IFTTT Sender: Starting HTTPS POST request...");
        int httpCode = http.POST(jsonPayload); // Send POST request
        Serial.print("IFTTT Sender: HTTP Response code: "); Serial.println(httpCode);

        if (httpCode == HTTP_CODE_OK) { // IFTTT returns 200 OK on success
            String payload = http.getString();
            Serial.print("IFTTT Sender: Response payload: "); Serial.println(payload.substring(0,100)); // Print first 100 chars
            success = true;
            Serial.println("IFTTT Sender: Data sent successfully!");
        } else {
             Serial.print("IFTTT Sender: HTTP POST failed, error: ");
             Serial.print(http.errorToString(httpCode).c_str());
             Serial.println(); // Newline
        }
        http.end(); // Close connection
    } else {
        Serial.println("IFTTT Sender: Unable to connect (http.begin failed). Check URL/Network.");
    }

    return success;
}

// --- End of File ---
