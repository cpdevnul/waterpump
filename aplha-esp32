#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <WiFi.h>

#define RELAY_PIN 17 // ESP32 pin GPIO17 that connects to relay
#define MOISTURE_PIN 36 // ESP32 pin GPIO36 (ADC0) that connects to AOUT pin of moisture sensor

// --- Calibration Values ---
const int AirValue = 3000;   // Calibrate this value in air (sensor out of soil)
const int WaterValue = 1110;  // Calibrate this value in water (sensor fully submerged)

// OLED display setup
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 32
#define OLED_RESET -1 // Reset pin # (or -1 if sharing Arduino reset pin)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// --- Wi-Fi Credentials ---
const char* ssid = "SET";       // Replace with your Wi-Fi network name
const char* password = "SET"; // Replace with your Wi-Fi password

// --- Timing ---
const long sampleInterval = 10000; // Sample every 10 seconds (10000 milliseconds)
unsigned long lastSampleTime = 0;   // Timestamp of the last sensor reading

// --- Pump Control ---
const unsigned long maxPumpRunTime = 25 * 60 * 1000; // 25 minutes in milliseconds
unsigned long pumpStartTime = 0;                     // Timestamp when the pump started
bool pumpIsRunning = false;                       // Flag to track if the pump is running

// --- Wi-Fi Connection Parameters ---
const unsigned long wifiConnectTimeout = 3 * 60 * 1000; // 3 minutes in milliseconds
unsigned long wifiConnectStartTime = 0;
const unsigned long wifiReconnectInterval = 60 * 1000; // Reconnect every 60 seconds

bool wifiConnected = false; // Global flag to track Wi-Fi connection
unsigned long lastWiFiReconnectTime = 0;

// --- Hysteresis Parameters ---
const float moistureThresholdDry = 40.0; // Adjust this threshold as needed
const float moistureHysteresis = 5.0;  // Percentage points of hysteresis

void setup() {
  Serial.begin(9600);
  pinMode(RELAY_PIN, OUTPUT);
  // set the ADC attenuation to 11 dB (up to ~3.3V input)
  analogSetAttenuation(ADC_11db);

  // OLED Initialization
  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { // Address 0x3C for 128x32
    Serial.println(F("SSD1306 allocation failed"));
    for (;;); // Don't proceed, loop forever
  }
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(0, 0);
  display.println("System Start");
  display.display();
  delay(2000);
  display.clearDisplay();

  // Connect to Wi-Fi
  wifiConnectStartTime = millis(); // Record Wi-Fi connection start time
  wifiConnected = connectWiFi();   // Attempt Wi-Fi connection

  lastSampleTime = millis(); // Initialize the last sample time
  lastWiFiReconnectTime = millis(); // Initialize the last reconnect time
}

void loop() {
  unsigned long currentMillis = millis();

  // Check Wi-Fi connection status and reconnect if needed
  checkWiFiConnection();

  // Check if pump has exceeded max runtime
  checkPumpRuntime(currentMillis);

  // Check if it's time to sample the sensor
  if (currentMillis - lastSampleTime >= sampleInterval) {
    lastSampleTime = currentMillis; // Update the last sample time

    int sensorValue = analogRead(MOISTURE_PIN); // read the analog value from sensor

    // Calculate percentage
    float moisturePercentage = map(sensorValue, AirValue, WaterValue, 0, 100);
    moisturePercentage = constrain(moisturePercentage, 0, 100); // Ensure percentage is within 0-100 range

    updateMoistureAndPump(moisturePercentage, currentMillis);

    display.clearDisplay();
    display.setCursor(0, 0);
    display.print("Moisture: ");
    display.print(moisturePercentage);
    display.print("%");

    display.setCursor(0, 10);
    display.print("Pump: ");
    if (pumpIsRunning) {
      display.print("ON");
    } else {
      display.print("OFF");
    }
    display.display();

    Serial.print(" (");
    Serial.print(sensorValue);
    Serial.print(")");
    Serial.print(" Percentage: ");
    Serial.println(moisturePercentage);
  }

  delay(100); // Small delay to prevent busy-looping
}

void updateMoistureAndPump(float moisturePercentage, unsigned long currentMillis) {
  if (moisturePercentage < moistureThresholdDry - moistureHysteresis && !pumpIsRunning) {
    // Soil is significantly dry, and pump is off
    Serial.println("The soil is DRY => turn pump ON");
    digitalWrite(RELAY_PIN, HIGH);
    pumpIsRunning = true;
    pumpStartTime = currentMillis; // Record the pump start time
  } else if (moisturePercentage >= moistureThresholdDry + moistureHysteresis && pumpIsRunning) {
    // Soil is significantly wet, and pump is on
    Serial.println("The soil is WET => turn pump OFF");
    digitalWrite(RELAY_PIN, LOW);
    pumpIsRunning = false;
  }
}

void checkPumpRuntime(unsigned long currentMillis) {
  if (pumpIsRunning && (currentMillis - pumpStartTime >= maxPumpRunTime)) {
    Serial.println("Max pump runtime reached. Turning off.");
    display.clearDisplay();
    display.setCursor(0, 0);
    display.print("Pump: OFF (Max)");
    display.display();
    digitalWrite(RELAY_PIN, LOW);
    pumpIsRunning = false;
  }
}

bool connectWiFi() {
  WiFi.begin(ssid, password);
  display.clearDisplay();
  display.setCursor(0, 0);
  display.print("Connecting");
  display.display();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  int wifi_connect_counter = 0;
  const int max_wifi_attempts = 4;       // Maximum connection attempts
  const unsigned long initial_wifi_delay = 1000; // Initial delay in milliseconds
  const unsigned long wifi_delay_increment = 2000; // Increment delay by this amount

  while (WiFi.status() != WL_CONNECTED && wifi_connect_counter < max_wifi_attempts) {
    unsigned long current_wifi_delay = initial_wifi_delay + (wifi_connect_counter * wifi_delay_increment);
    Serial.print("Attempt ");
    Serial.print(wifi_connect_counter + 1);
    Serial.print(" - Waiting ");
    Serial.print(current_wifi_delay / 1000.0); // Print delay in seconds
    Serial.println(" seconds...");
    delay(current_wifi_delay);
    WiFi.begin(ssid, password);
    wifi_connect_counter++;
    Serial.print("WiFi Status: ");
    Serial.println(WiFi.status());
  }

  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("Failed to connect to WiFi after multiple attempts!");
    display.clearDisplay();
    display.setCursor(0, 0);
    display.println("Connection Failed");
    display.display();
    delay(2000);
    return false; // Indicate failure
  }

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());

  display.clearDisplay();
  display.setCursor(0, 0);
  display.print("WiFi Connected!");
  display.setCursor(0, 10);
  display.println(WiFi.localIP());
  display.display();
  delay(2000);
  display.clearDisplay();
  return true; // Indicate success
}

void checkWiFiConnection() {
  unsigned long currentMillis = millis();
  if (WiFi.status() != WL_CONNECTED && (currentMillis - lastWiFiReconnectTime >= wifiReconnectInterval)) {
    Serial.println("Attempting to reconnect to WiFi");
    display.clearDisplay();
    display.setCursor(0, 0);
    display.print("Reconnecting");
    display.display();
    wifiConnected = connectWiFi();
    lastWiFiReconnectTime = currentMillis;
  }
}
